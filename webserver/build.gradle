plugins {
  id 'java'
  id 'application'
  id 'org.mikeneck.graalvm-native-image' version '1.3.0'
}

mainClassName = 'de.spinscale.webserver.Webserver'

dependencies {
  implementation project(':searcher')
  implementation 'io.javalin:javalin:3.13.6'
  implementation 'com.eclipsesource.minimal-json:minimal-json:0.9.5'
  // rethink if you want this logger, or something easier for graal
  implementation 'org.slf4j:slf4j-simple:1.8.0-beta4'

  // we don't need this, unless we try to implementation a graal native image...
  // you can look up the corresponding versions in io.javalin.core.util.OptionalDependency
  implementation 'com.nixxcode.jvmbrotli:jvmbrotli:0.2.0'
  // same for jackson
  implementation "com.fasterxml.jackson.core:jackson-databind:2.10.3"
}

task fatJar(type: Jar) {
  manifest {
    attributes(
      "Main-Class": "de.spinscale.webserver.Webserver",
      "Implementation-Version": archiveVersion,
      "Implementation-Title": "Graal Image"
    )
  }
  archiveBaseName = project.name + '-all'
  from { 
    duplicatesStrategy = org.gradle.api.file.DuplicatesStrategy.INCLUDE
    configurations.implementation.collect { it.isDirectory() ? it : zipTree(it) }
  }
  with jar
}

task copyIndex(type: Copy) {
  from '../indexer/build/indices'
  into 'build/data/'
}

nativeImage {
  graalVmHome = System.getProperty('java.home')
  mainClass = 'de.spinscale.webserver.Webserver'
  executableName = 'webserver'
  outputDirectory = file("$buildDir/bin")
  arguments(
          '--no-fallback',
          // hack to only run static compilation under Linux
          org.gradle.internal.os.OperatingSystem.current().isLinux() ? '--static' : '',
          '--initialize-at-build-time=de.spinscale,org.apache.lucene,javax.servlet',
          '--report-unsupported-elements-at-runtime',
          '-H:+ReportExceptionStackTraces',
          '-H:+UseServiceLoaderFeature',
          '-H:IncludeResourceBundles=javax.servlet.LocalStrings',
  )
}

task dockerRunLatest(type : Exec) {
  description "run latest docker image"
  commandLine 'docker', 'run', '--init', '-p', '7000:7000/tcp', '--env', 'PORT=7000', 'spinscale/gcr-serverless-reverse-geocoder:latest'
}

run {
  environment 'PORT', '7000'
  environment 'AUTH_FILE', 'build/resources/test/auth.fst'
  environment 'INDEX_DIRECTORY', 'build/data'
}

// ensure the index has been created properly
dockerRunLatest.dependsOn ( ':dockerBuildImage' )
test.dependsOn (':indexer:buildIndex')
assemble.dependsOn (':indexer:buildIndex')
assemble.dependsOn ('fatJar')
assemble.dependsOn ('copyIndex')
